{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "30ee1199-6735-4ee3-9130-6907041ed3ce"
   },
   "source": [
    "# UCCD3074: Deep Learning for Data Science Group Assignment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "48433aa8-5cd2-49c4-8e8d-69f36581d841"
   },
   "source": [
    "### Trimester June 2025"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "5995ded1-4bf9-47ee-9e3a-d2200d856a11"
   },
   "source": [
    "### Title: Fine-Tuning a Transformer for Detecting AI-Generated Text (Application-Based)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "82128b9f-52fc-413e-9fa7-fb2738804e0b"
   },
   "source": [
    "### Group 6:\n",
    "1. Charmaine Hooi Wai Yee (2104533)\n",
    "2. Khow Kai Yong (2105725)\n",
    "3. Michelle Koh Mei Xian (2103784)\n",
    "4. Seow Yi Xuan (2105524)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "c063d1af-3361-4214-9a51-00703ded4038"
   },
   "source": [
    "## **1.0: Import Libraries**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:44:19.507519Z",
     "iopub.status.busy": "2025-09-11T13:44:19.506930Z",
     "iopub.status.idle": "2025-09-11T13:44:46.510783Z",
     "shell.execute_reply": "2025-09-11T13:44:46.510037Z",
     "shell.execute_reply.started": "2025-09-11T13:44:19.507490Z"
    },
    "id": "FpXfd1qaqKjC",
    "outputId": "90114def-06e4-4786-e01b-6f87fe7ebf96",
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\n",
      "Collecting datasets\n",
      "  Downloading datasets-4.0.0-py3-none-any.whl.metadata (19 kB)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.18.0)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (1.26.4)\n",
      "Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (19.0.1)\n",
      "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.3)\n",
      "Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.4)\n",
      "Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\n",
      "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\n",
      "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\n",
      "Collecting fsspec<=2025.3.0,>=2023.1.0 (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets)\n",
      "  Downloading fsspec-2025.3.0-py3-none-any.whl.metadata (11 kB)\n",
      "Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.33.1)\n",
      "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (25.0)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\n",
      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (3.12.13)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.14.0)\n",
      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (1.1.5)\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (1.3.8)\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (1.2.4)\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (0.1.1)\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (2025.2.0)\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (2022.2.0)\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->datasets) (2.4.1)\n",
      "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.5.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.6.15)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2.6.1)\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.3.2)\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (25.3.0)\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.7.0)\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (6.6.3)\n",
      "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (0.3.2)\n",
      "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.20.1)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->datasets) (2024.2.0)\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->datasets) (2022.2.0)\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->datasets) (1.4.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->datasets) (2024.2.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->datasets) (2024.2.0)\n",
      "Downloading datasets-4.0.0-py3-none-any.whl (494 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m494.8/494.8 kB\u001b[0m \u001b[31m10.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading fsspec-2025.3.0-py3-none-any.whl (193 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m12.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: fsspec, datasets\n",
      "  Attempting uninstall: fsspec\n",
      "    Found existing installation: fsspec 2025.5.1\n",
      "    Uninstalling fsspec-2025.5.1:\n",
      "      Successfully uninstalled fsspec-2025.5.1\n",
      "  Attempting uninstall: datasets\n",
      "    Found existing installation: datasets 3.6.0\n",
      "    Uninstalling datasets-3.6.0:\n",
      "      Successfully uninstalled datasets-3.6.0\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cublas-cu12==12.4.5.8; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cublas-cu12 12.5.3.2 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cuda-cupti-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-cupti-cu12 12.5.82 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cuda-nvrtc-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-nvrtc-cu12 12.5.82 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cuda-runtime-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-runtime-cu12 12.5.82 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cudnn-cu12==9.1.0.70; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cudnn-cu12 9.3.0.75 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cufft-cu12==11.2.1.3; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cufft-cu12 11.2.3.61 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-curand-cu12==10.3.5.147; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-curand-cu12 10.3.6.82 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cusolver-cu12==11.6.1.9; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusolver-cu12 11.6.3.83 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-cusparse-cu12==12.3.1.170; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusparse-cu12 12.5.1.3 which is incompatible.\n",
      "torch 2.6.0+cu124 requires nvidia-nvjitlink-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-nvjitlink-cu12 12.5.82 which is incompatible.\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed datasets-4.0.0 fsspec-2025.3.0\n",
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\n",
      "Collecting transformers\n",
      "  Downloading transformers-4.56.1-py3-none-any.whl.metadata (42 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.2/42.2 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
      "Collecting huggingface-hub<1.0,>=0.34.0 (from transformers)\n",
      "  Downloading huggingface_hub-0.34.4-py3-none-any.whl.metadata (14 kB)\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.4)\n",
      "Collecting tokenizers<=0.23.0,>=0.22.0 (from transformers)\n",
      "  Downloading tokenizers-0.22.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (2025.3.0)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.0)\n",
      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.3.8)\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.2.4)\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (0.1.1)\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2025.2.0)\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2022.2.0)\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2.4.1)\n",
      "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2024.2.0)\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2022.2.0)\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->transformers) (1.4.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->transformers) (2024.2.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->transformers) (2024.2.0)\n",
      "Downloading transformers-4.56.1-py3-none-any.whl (11.6 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.6/11.6 MB\u001b[0m \u001b[31m103.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m0:01\u001b[0m\n",
      "\u001b[?25hDownloading huggingface_hub-0.34.4-py3-none-any.whl (561 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m561.5/561.5 kB\u001b[0m \u001b[31m32.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading tokenizers-0.22.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.3 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m91.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: huggingface-hub, tokenizers, transformers\n",
      "  Attempting uninstall: huggingface-hub\n",
      "    Found existing installation: huggingface-hub 0.33.1\n",
      "    Uninstalling huggingface-hub-0.33.1:\n",
      "      Successfully uninstalled huggingface-hub-0.33.1\n",
      "  Attempting uninstall: tokenizers\n",
      "    Found existing installation: tokenizers 0.21.2\n",
      "    Uninstalling tokenizers-0.21.2:\n",
      "      Successfully uninstalled tokenizers-0.21.2\n",
      "  Attempting uninstall: transformers\n",
      "    Found existing installation: transformers 4.52.4\n",
      "    Uninstalling transformers-4.52.4:\n",
      "      Successfully uninstalled transformers-4.52.4\n",
      "Successfully installed huggingface-hub-0.34.4 tokenizers-0.22.0 transformers-4.56.1\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.2.2)\n",
      "Collecting scikit-learn\n",
      "  Downloading scikit_learn-1.7.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\n",
      "Requirement already satisfied: numpy>=1.22.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.26.4)\n",
      "Requirement already satisfied: scipy>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22.0->scikit-learn) (1.3.8)\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22.0->scikit-learn) (1.2.4)\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22.0->scikit-learn) (0.1.1)\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22.0->scikit-learn) (2025.2.0)\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22.0->scikit-learn) (2022.2.0)\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22.0->scikit-learn) (2.4.1)\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.22.0->scikit-learn) (2024.2.0)\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.22.0->scikit-learn) (2022.2.0)\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.22.0->scikit-learn) (1.4.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.22.0->scikit-learn) (2024.2.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.22.0->scikit-learn) (2024.2.0)\n",
      "Downloading scikit_learn-1.7.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (9.7 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.7/9.7 MB\u001b[0m \u001b[31m79.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: scikit-learn\n",
      "  Attempting uninstall: scikit-learn\n",
      "    Found existing installation: scikit-learn 1.2.2\n",
      "    Uninstalling scikit-learn-1.2.2:\n",
      "      Successfully uninstalled scikit-learn-1.2.2\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "category-encoders 2.7.0 requires scikit-learn<1.6.0,>=1.0.0, but you have scikit-learn 1.7.2 which is incompatible.\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\n",
      "sklearn-compat 0.1.3 requires scikit-learn<1.7,>=1.2, but you have scikit-learn 1.7.2 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed scikit-learn-1.7.2\n"
     ]
    }
   ],
   "source": [
    "#1\n",
    "!pip install datasets --upgrade\n",
    "#2\n",
    "!pip install transformers --upgrade\n",
    "!pip install scikit-learn --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:44:46.512013Z",
     "iopub.status.busy": "2025-09-11T13:44:46.511770Z",
     "iopub.status.idle": "2025-09-11T13:44:46.836580Z",
     "shell.execute_reply": "2025-09-11T13:44:46.835862Z",
     "shell.execute_reply.started": "2025-09-11T13:44:46.511990Z"
    },
    "id": "oOE87PQYttX4",
    "outputId": "43329da7-5cb2-40d0-8556-79f9bc42dd29",
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c9105d9fbecf4a2dbf028277e8f933ea",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Login to Hugging Face\n",
    "# It will prompt to paste access token\n",
    "# Paste Hugging Face access token: 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\n",
    "from huggingface_hub import login\n",
    "login()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:44:56.351536Z",
     "iopub.status.busy": "2025-09-11T13:44:56.350798Z",
     "iopub.status.idle": "2025-09-11T13:44:56.472158Z",
     "shell.execute_reply": "2025-09-11T13:44:56.471084Z",
     "shell.execute_reply.started": "2025-09-11T13:44:56.351510Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "!git config --global credential.helper store"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:45:56.606412Z",
     "iopub.status.busy": "2025-09-11T13:45:56.605726Z",
     "iopub.status.idle": "2025-09-11T13:45:56.609873Z",
     "shell.execute_reply": "2025-09-11T13:45:56.608992Z",
     "shell.execute_reply.started": "2025-09-11T13:45:56.606387Z"
    },
    "id": "15812921-4268-49ac-b98a-f5ba69e67287",
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Michelle Koh Mei Xian 2103784\n",
    "# ########################################\n",
    "from datasets import load_dataset\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "b6584c8f-bc1f-47f6-ae88-48d8934a150a"
   },
   "source": [
    "## **2.0: Dataset Preparation & Cleaning**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "72890683-e2e7-4067-afa3-0fa4c697167b"
   },
   "source": [
    "#### 2.1: Load and Inspect The Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "ow6_NX4tyX2H"
   },
   "source": [
    "First, we loaded the Hugging Face dataset `andythetechnerd03/AI-human-text`, which contains short texts classified as either human-written or AI-generated. The training split was converted into a Pandas DataFrame to make it easier to work with.\n",
    "\n",
    "We then checked the number of samples and how many were AI vs human.  `'Generated'` is the original label column, with 0 indicating human and 1 means AI. For better readability, we added a new column `'label_text'` to show the labels as \"human\" or \"ai\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:45:58.599304Z",
     "iopub.status.busy": "2025-09-11T13:45:58.598529Z",
     "iopub.status.idle": "2025-09-11T13:46:26.117231Z",
     "shell.execute_reply": "2025-09-11T13:46:26.116379Z",
     "shell.execute_reply.started": "2025-09-11T13:45:58.599280Z"
    },
    "id": "cb54e291-8507-47c9-ac30-2f3659aeda2f",
    "outputId": "208750e3-e46f-4f1f-b234-463eaae6161d",
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "199d1b3ee8674806b07f85edcd9f3b3c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md:   0%|          | 0.00/808 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1851c59094374011b6f857f41b2ed06a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "data/train-00000-of-00003.parquet:   0%|          | 0.00/181M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "04dfaad82e1747d1abb9c89c04cb27ac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "data/train-00001-of-00003.parquet:   0%|          | 0.00/181M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ba156a534258474b99d39779e0b78a2c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "data/train-00002-of-00003.parquet:   0%|          | 0.00/181M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "71632913514d43abbb9f1a9360afc3aa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "data/test-00000-of-00001.parquet:   0%|          | 0.00/28.5M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8a72418ea72d4e239daf8b38e106bacd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split:   0%|          | 0/462873 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "236161c2c0b846798dd0384697712658",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating test split:   0%|          | 0/24362 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetDict({\n",
      "    train: Dataset({\n",
      "        features: ['text', 'generated'],\n",
      "        num_rows: 462873\n",
      "    })\n",
      "    test: Dataset({\n",
      "        features: ['text', 'generated'],\n",
      "        num_rows: 24362\n",
      "    })\n",
      "})\n",
      "Initial DataFrame shape: (462873, 2)\n",
      "                                                text  generated\n",
      "0  studies have been proven that people are start...          0\n",
      "1  i disagree with you ih twenty years the humber...          1\n",
      "2  hey yall today were gonna talk about this cool...          1\n",
      "3  im going to start explaining and giving my opi...          0\n",
      "4  limiting car usage can be very helpful not onl...          0\n",
      "generated\n",
      "0    290672\n",
      "1    172201\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Michelle Koh Mei Xian 2103784\n",
    "# ########################################\n",
    "\n",
    "# load the dataset from Hugging Face\n",
    "dataset = load_dataset(\"andythetechnerd03/AI-human-text\")\n",
    "print(dataset)\n",
    "\n",
    "# Convert the 'train' split into a pandas DataFrame for easier processing and inspection\n",
    "df = pd.DataFrame(dataset['train'])\n",
    "print(\"Initial DataFrame shape:\", df.shape)\n",
    "\n",
    "# inspect the dataset\n",
    "print(df.head())                      # Show the first few samples\n",
    "print(df['generated'].value_counts()) # Count the number of AI-generated (1) vs human-written (0) texts\n",
    "\n",
    "# Map label integers to human-readable text\n",
    "label_map = {0: \"human\", 1: \"ai\"}\n",
    "df['label_text'] = df['generated'].map(label_map)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "THOHf7qd0Ogn"
   },
   "source": [
    "#### 2.2: Balance Human vs AI Samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "WMU-mLbs1H5j"
   },
   "source": [
    "The model's learning may be affected by the fact that the initial dataset contained more human-written texts than AI-generated ones.  We corrected this by taking an equal number of samples from each class, balancing the dataset.  Due to the decreased class size, we employed undersampling, in which we chose an equal number of samples at random from each class.  This makes it easier for the model to learn both kinds of text equally."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:46:26.118971Z",
     "iopub.status.busy": "2025-09-11T13:46:26.118501Z",
     "iopub.status.idle": "2025-09-11T13:46:26.378543Z",
     "shell.execute_reply": "2025-09-11T13:46:26.377550Z",
     "shell.execute_reply.started": "2025-09-11T13:46:26.118951Z"
    },
    "id": "ilkGrXgC0kpe",
    "outputId": "4585372b-801c-4221-95be-8957b4fe4b63",
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Balanced Data Shape: (344402, 3)\n",
      "generated\n",
      "0    172201\n",
      "1    172201\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_36/1756571989.py:8: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  .apply(lambda x: x.sample(min_class_count, random_state=42))\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Michelle Koh Mei Xian 2103784\n",
    "# ########################################\n",
    "min_class_count = df['generated'].value_counts().min()\n",
    "\n",
    "df_balanced = (\n",
    "    df.groupby('generated', group_keys=False)\n",
    "    .apply(lambda x: x.sample(min_class_count, random_state=42))\n",
    "    .reset_index(drop=True)\n",
    ")\n",
    "\n",
    "print(\"Balanced Data Shape:\", df_balanced.shape)\n",
    "print(df_balanced['generated'].value_counts())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "Z-vUJ8Dx1xpL"
   },
   "source": [
    "#### 2.3: Clean Text, Remove Duplicates, Handle Encoding Issues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false,
    "id": "GHjvhU0I3FXs"
   },
   "source": [
    "We cleaned the text data by removing duplicate entries, blank texts, and any encoding issues. This step ensures the dataset is clean and ready for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:46:26.379598Z",
     "iopub.status.busy": "2025-09-11T13:46:26.379321Z",
     "iopub.status.idle": "2025-09-11T13:46:55.849539Z",
     "shell.execute_reply": "2025-09-11T13:46:55.848849Z",
     "shell.execute_reply.started": "2025-09-11T13:46:26.379573Z"
    },
    "id": "f6h1lb8N1zDT",
    "outputId": "a96dc487-6801-4843-b300-57177ca8f8c5",
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate entries: 1521\n",
      "Cleaned Data Shape: (342878, 3)\n",
      "Cleaned dataset saved as CSV.\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Michelle Koh Mei Xian 2103784\n",
    "# ########################################\n",
    "# Remove duplicate text entries\n",
    "print(\"Duplicate entries:\", df_balanced.duplicated(subset='text').sum())\n",
    "df_balanced = df_balanced.drop_duplicates(subset='text')\n",
    "\n",
    "# Handle missing or blank text\n",
    "df_balanced = df_balanced.dropna(subset=['text'])  # Drop NaN values\n",
    "df_balanced['text'] = df_balanced['text'].astype(str).str.strip()  # Remove leading/trailing spaces\n",
    "df_balanced = df_balanced[df_balanced['text'] != \"\"]  # Remove empty strings\n",
    "\n",
    "# Handle encoding issues\n",
    "df_balanced['text'] = df_balanced['text'].apply(lambda x: x.encode('utf-8', 'ignore').decode('utf-8'))\n",
    "\n",
    "# Final shape\n",
    "print(\"Cleaned Data Shape:\", df_balanced.shape)\n",
    "\n",
    "# Save cleaned data\n",
    "df_balanced.to_csv(\"balanced_ai_human_text.csv\", index=False)\n",
    "print(\"Cleaned dataset saved as CSV.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 2.4: Create a Reduced Sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:46:55.851436Z",
     "iopub.status.busy": "2025-09-11T13:46:55.851181Z",
     "iopub.status.idle": "2025-09-11T13:46:55.894115Z",
     "shell.execute_reply": "2025-09-11T13:46:55.893318Z",
     "shell.execute_reply.started": "2025-09-11T13:46:55.851415Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reduced dataset: (60000, 3)\n",
      "Class distribution in small sample:\n",
      "generated\n",
      "0    37628\n",
      "1    22372\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Charmaine Hooi Wai Yee 2140533\n",
    "# ########################################\n",
    "# Take a MUCH smaller sample\n",
    "sample_size = 60000  # Only 60,000 samples instead of 400,000+\n",
    "df_small = df.sample(n=sample_size, random_state=42, replace=False)\n",
    "\n",
    "print(f\"Reduced dataset: {df_small.shape}\")\n",
    "print(\"Class distribution in small sample:\")\n",
    "print(df_small['generated'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "## **3.0 Tokenization and Input Formatting**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "This stage is to convert the raw text into a numerical format that a machine learning model especially a transformer **(distilroBerta)** can understand."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.1 Import Necessary Libraries\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "* AutoTokenizer: It is used to automatically loads the correct tokenizer based on a transformer model name\n",
    "* Dataset: Hugging Face's fast and memory-efficient dataset format\n",
    "* train_test_split: Split the data into training and validation set\n",
    "* DataLoader: Prepares batches for training in PyTorch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:46:55.895063Z",
     "iopub.status.busy": "2025-09-11T13:46:55.894832Z",
     "iopub.status.idle": "2025-09-11T13:47:05.741334Z",
     "shell.execute_reply": "2025-09-11T13:47:05.740551Z",
     "shell.execute_reply.started": "2025-09-11T13:46:55.895048Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "from transformers import AutoTokenizer\n",
    "from datasets import Dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "import torch\n",
    "import pandas as pd\n",
    "from torch.utils.data import DataLoader"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.2 Load the Cleaned CSV Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "The cleaned and balanced CSV dataset created in Section 2.0 is loaded."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:47:05.742572Z",
     "iopub.status.busy": "2025-09-11T13:47:05.742178Z",
     "iopub.status.idle": "2025-09-11T13:47:16.296012Z",
     "shell.execute_reply": "2025-09-11T13:47:16.295170Z",
     "shell.execute_reply.started": "2025-09-11T13:47:05.742553Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using 60000 rows for faster training (downsampled if > 60000).\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "df = pd.read_csv(\"balanced_ai_human_text.csv\")\n",
    "sample_size = 60000  # match Notebook (1)\n",
    "if len(df) > sample_size:\n",
    "    df = df.sample(n=sample_size, random_state=42, replace=False)\n",
    "print(f\"Using {len(df)} rows for faster training (downsampled if > {sample_size}).\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.3 Split into Training and Validation Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "1. The dataset is split into 80% of training data and 20% of validation data.\n",
    "2. The use of \"stratify\" is to ensure the equal distribution of AI and human classes in both splits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:47:16.304620Z",
     "iopub.status.busy": "2025-09-11T13:47:16.304162Z",
     "iopub.status.idle": "2025-09-11T13:47:16.460796Z",
     "shell.execute_reply": "2025-09-11T13:47:16.460183Z",
     "shell.execute_reply.started": "2025-09-11T13:47:16.304598Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "train_texts, val_texts, train_labels, val_labels = train_test_split(\n",
    "    df['text'].tolist(), df['generated'].tolist(),\n",
    "    test_size=0.2, random_state=42, stratify=df['generated']\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:47:16.461806Z",
     "iopub.status.busy": "2025-09-11T13:47:16.461538Z",
     "iopub.status.idle": "2025-09-11T13:47:16.627272Z",
     "shell.execute_reply": "2025-09-11T13:47:16.626556Z",
     "shell.execute_reply.started": "2025-09-11T13:47:16.461784Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before deduplication - Train: (48000, 2), Val: (12000, 2)\n",
      "After deduplication - Train: (47878, 2), Val: (11990, 2)\n",
      "Number of duplicate texts between splits: 53\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Charmaine Hooi Wai Yee 2104533\n",
    "# ########################################\n",
    "# ########################################\n",
    "# Prevent Data Leakage\n",
    "# Reason: Original split may contain the same text in both train and val.\n",
    "# Fix: Remove duplicates WITHIN each split after the split is done.\n",
    "# ########################################\n",
    "\n",
    "# 1. Combine the split texts and labels back into DataFrames\n",
    "train_df = pd.DataFrame({'text': train_texts, 'generated': train_labels})\n",
    "val_df = pd.DataFrame({'text': val_texts, 'generated': val_labels})\n",
    "\n",
    "print(f\"Before deduplication - Train: {train_df.shape}, Val: {val_df.shape}\")\n",
    "\n",
    "# 2. Remove duplicates WITHIN each split\n",
    "train_df = train_df.drop_duplicates(subset='text')\n",
    "val_df = val_df.drop_duplicates(subset='text')\n",
    "\n",
    "print(f\"After deduplication - Train: {train_df.shape}, Val: {val_df.shape}\")\n",
    "\n",
    "# 3. Check for any intersection\n",
    "train_texts_set = set(train_df['text'])\n",
    "val_texts_set = set(val_df['text'])\n",
    "duplicates = train_texts_set.intersection(val_texts_set)\n",
    "print(f\"Number of duplicate texts between splits: {len(duplicates)}\")\n",
    "\n",
    "# 4. Extract the cleaned lists back for the rest of the pipeline\n",
    "train_texts = train_df['text'].tolist()\n",
    "train_labels = train_df['generated'].tolist()\n",
    "val_texts = val_df['text'].tolist()\n",
    "val_labels = val_df['generated'].tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.4 Tokenize the Text Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "1. The tokenizer for transformer model (distilroBerta) is loaded.\n",
    "2. This tokenizer will convert the raw text into numerical input IDs for the model to train."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:53:22.118834Z",
     "iopub.status.busy": "2025-09-11T13:53:22.118405Z",
     "iopub.status.idle": "2025-09-11T13:53:24.167964Z",
     "shell.execute_reply": "2025-09-11T13:53:24.167353Z",
     "shell.execute_reply.started": "2025-09-11T13:53:22.118795Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f18b6e2bc70d406db26c1ffa4ff5f343",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/25.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9cee349930fe432d8512859769197c89",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/480 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0ea81b40b58c4a7e917a97e9743b46da",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "481d4467914448bfb215b2284acf5c32",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "20299f9e123242b6aa194f0c359db29d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "model_checkpoint = \"distilroberta-base\"\n",
    "tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.5 Convert to Hugging Face Dataset Format"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "The dataset in Python list is converted into Hugging Face's Dataset object to support .map() operations which enables the fast tokenization process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:53:25.471594Z",
     "iopub.status.busy": "2025-09-11T13:53:25.470969Z",
     "iopub.status.idle": "2025-09-11T13:53:26.870346Z",
     "shell.execute_reply": "2025-09-11T13:53:26.869591Z",
     "shell.execute_reply.started": "2025-09-11T13:53:25.471574Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "\n",
    "# - Added deduplication\n",
    "# Convert to DataFrames to deduplicate\n",
    "train_df = pd.DataFrame({'text': train_texts, 'label': train_labels})\n",
    "val_df = pd.DataFrame({'text': val_texts, 'label': val_labels})\n",
    "\n",
    "# Remove duplicates WITHIN each split to prevent data leakage\n",
    "train_df = train_df.drop_duplicates(subset='text')\n",
    "val_df = val_df.drop_duplicates(subset='text')\n",
    "\n",
    "# Convert the cleaned DataFrames to Hugging Face Datasets\n",
    "train_dataset_hf = Dataset.from_dict({'text': train_df['text'].tolist(), 'label': train_df['label'].tolist()})\n",
    "val_dataset_hf = Dataset.from_dict({'text': val_df['text'].tolist(), 'label': val_df['label'].tolist()})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.6 Tokenize the Dataset in Batches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:53:27.305777Z",
     "iopub.status.busy": "2025-09-11T13:53:27.305089Z",
     "iopub.status.idle": "2025-09-11T13:54:21.126342Z",
     "shell.execute_reply": "2025-09-11T13:54:21.125632Z",
     "shell.execute_reply.started": "2025-09-11T13:53:27.305752Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "50db319b2f894f0ab04f351ac4fdd367",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map (num_proc=4):   0%|          | 0/47878 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "# Tokenize in batches (faster + uses multiple cores)\n",
    "def tokenize_batch(example):\n",
    "    return tokenizer(\n",
    "        example['text'],\n",
    "        padding=\"max_length\",\n",
    "        truncation=True,\n",
    "        max_length=512\n",
    "    )\n",
    "\n",
    "# Apply tokenizer\n",
    "train_dataset_tokenized = train_dataset_hf.map(tokenize_batch, batched=True, num_proc=4)\n",
    "val_dataset_tokenized   = val_dataset_hf.map(tokenize_batch,   batched=True, num_proc=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "1. The dataset is tokenized in parallel using num_proc=4, improving the tokenization speed.\n",
    "   * import multiprocessing\n",
    "   * num_cores = multiprocessing.cpu_count()\n",
    "   * print(f\"Available CPU cores: {num_cores}\")\n",
    "   * **Use the above code to check the number of CPU core available (num_proc) and change accordingly.** \n",
    "2. Padding and Truncation are applied so all input sequences are the same length (512 tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.7 Format the Dataset for PyTorch"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "The Hugging Face dataset is converted to PyTorch tensors so that it is ready to be used for PyTorch training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:54:21.128424Z",
     "iopub.status.busy": "2025-09-11T13:54:21.128160Z",
     "iopub.status.idle": "2025-09-11T13:54:21.134181Z",
     "shell.execute_reply": "2025-09-11T13:54:21.133395Z",
     "shell.execute_reply.started": "2025-09-11T13:54:21.128399Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "# Format for PyTorch\n",
    "train_dataset_tokenized.set_format(type='torch', columns=['input_ids', 'attention_mask', 'label'])\n",
    "val_dataset_tokenized.set_format(type='torch', columns=['input_ids', 'attention_mask', 'label'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.8 Create DataLoaders for Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "1. DataLoader objects are created to iterate over the batches during training and validation.\n",
    "2. \"shuffle=True\" helps in generalization during training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:54:21.135251Z",
     "iopub.status.busy": "2025-09-11T13:54:21.134971Z",
     "iopub.status.idle": "2025-09-11T13:54:21.151033Z",
     "shell.execute_reply": "2025-09-11T13:54:21.150275Z",
     "shell.execute_reply.started": "2025-09-11T13:54:21.135235Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "train_loader = DataLoader(train_dataset_tokenized, batch_size=16, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset_tokenized, batch_size=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 3.9 Sanity Check"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "Do checking to make sure tokenization worked as expected by printing the first few token IDs, attention mask values and label."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:54:21.152967Z",
     "iopub.status.busy": "2025-09-11T13:54:21.152744Z",
     "iopub.status.idle": "2025-09-11T13:54:21.181748Z",
     "shell.execute_reply": "2025-09-11T13:54:21.181171Z",
     "shell.execute_reply.started": "2025-09-11T13:54:21.152953Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tokenization complete.\n",
      "Sample input IDs: tensor([   0, 8585,   32,   10, 3143,    9, 5086,   15,   99,    5])\n",
      "Attention mask: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n",
      "Label: tensor(1)\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Khow Kai Yong 2105725\n",
    "# ########################################\n",
    "print(\"Tokenization complete.\")\n",
    "sample = train_dataset_tokenized[0]\n",
    "print(\"Sample input IDs:\", sample['input_ids'][:10])\n",
    "print(\"Attention mask:\", sample['attention_mask'][:10])\n",
    "print(\"Label:\", sample['label'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "## **4.0: Model Training & Finetuning**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "This section documents how we fine-tune a pretrained transformer model (e.g., RoBERTa) for **binary classification** (0 = human, 1 = AI). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Weights & Biases logging was disabled via environment variables to prevent external tracking, ensuring training remained local and reproducible without reliance on third-party logging services."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:54:21.182672Z",
     "iopub.status.busy": "2025-09-11T13:54:21.182430Z",
     "iopub.status.idle": "2025-09-11T13:54:21.186477Z",
     "shell.execute_reply": "2025-09-11T13:54:21.185853Z",
     "shell.execute_reply.started": "2025-09-11T13:54:21.182650Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "# ########################################\n",
    "# Coded By: Charmaine Hooi Wai Yee 2104533\n",
    "# ########################################\n",
    "# DISABLE WANDB COMPLETELY\n",
    "import os\n",
    "os.environ[\"WANDB_DISABLED\"] = \"true\"\n",
    "os.environ[\"WANDB_MODE\"] = \"disabled\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 4.1: Model Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This section initializes and fine-tunes a RoBERTa-based sequence classification model using Hugging Face’s `Trainer`. \n",
    "It sets up training arguments (epochs, batch size, learning rate, weight decay), defines evaluation metrics (accuracy, \n",
    "precision, recall, F1), and manages dataset batching with a data collator. The `Trainer` handles optimization, validation \n",
    "each epoch, and saves the best checkpoint based on F1-score for later use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T13:54:21.187662Z",
     "iopub.status.busy": "2025-09-11T13:54:21.187408Z",
     "iopub.status.idle": "2025-09-11T14:41:00.104760Z",
     "shell.execute_reply": "2025-09-11T14:41:00.104038Z",
     "shell.execute_reply.started": "2025-09-11T13:54:21.187643Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a6e98262bf014ff88f502503ef3d3a22",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map (num_proc=4):   0%|          | 0/47878 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "eaf56326c8eb480abaaeb386890f494d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map (num_proc=4):   0%|          | 0/11990 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-11 13:55:16.001220: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1757598916.341906      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1757598916.451329      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformers: 4.56.1 | CUDA: True\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f97720b7c76849678d35007107bf5162",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/331M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at distilroberta-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train size: 47878 | Val size: 11990 | Steps/epoch: ~1497\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/nn/parallel/_functions.py:70: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='1498' max='1498' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [1498/1498 45:20, Epoch 2/2]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Epoch</th>\n",
       "      <th>Training Loss</th>\n",
       "      <th>Validation Loss</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>F1</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.016500</td>\n",
       "      <td>0.270660</td>\n",
       "      <td>0.936364</td>\n",
       "      <td>0.939907</td>\n",
       "      <td>0.887418</td>\n",
       "      <td>0.998995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.000700</td>\n",
       "      <td>0.066582</td>\n",
       "      <td>0.984404</td>\n",
       "      <td>0.984567</td>\n",
       "      <td>0.970866</td>\n",
       "      <td>0.998661</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/nn/parallel/_functions.py:70: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best checkpoint: ./mini_results/checkpoint-1498\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Charmaine Hooi Wai Yee 2104533\n",
    "# ########################################\n",
    "\n",
    "# === TRAIN + SAVE + REPORT ===\n",
    "import math, transformers, torch, inspect\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, average_precision_score\n",
    "from transformers import AutoModelForSequenceClassification, TrainingArguments, Trainer, DataCollatorWithPadding\n",
    "\n",
    "print(\"Transformers:\", transformers.__version__, \"| CUDA:\", torch.cuda.is_available())\n",
    "\n",
    "# Fallback if not defined earlier\n",
    "if 'model_checkpoint' not in globals():\n",
    "    model_checkpoint = \"roberta-base\"\n",
    "\n",
    "model = AutoModelForSequenceClassification.from_pretrained(model_checkpoint, num_labels=2)\n",
    "data_collator = DataCollatorWithPadding(tokenizer=tokenizer, pad_to_multiple_of=8 if torch.cuda.is_available() else None)\n",
    "\n",
    "# Version-adaptive eval key\n",
    "ta_sig   = inspect.signature(TrainingArguments.__init__).parameters\n",
    "eval_key = \"eval_strategy\" if \"eval_strategy\" in ta_sig else (\"evaluation_strategy\" if \"evaluation_strategy\" in ta_sig else None)\n",
    "\n",
    "# Keep it fast for the 3k sample\n",
    "training_kwargs = dict(\n",
    "    output_dir=\"./mini_results\",\n",
    "    num_train_epochs=2,                 # 1–2 is enough for small samples\n",
    "    per_device_train_batch_size=32,\n",
    "    per_device_eval_batch_size=64,\n",
    "    gradient_accumulation_steps=1,\n",
    "    learning_rate=2e-5,\n",
    "    weight_decay=0.01,\n",
    "    logging_steps=10,\n",
    "    save_strategy=\"epoch\" if \"save_strategy\" in ta_sig else \"steps\",\n",
    "    load_best_model_at_end=True if \"load_best_model_at_end\" in ta_sig else False,\n",
    "    metric_for_best_model=\"f1\" if \"metric_for_best_model\" in ta_sig else None,\n",
    "    greater_is_better=True if \"greater_is_better\" in ta_sig else None,\n",
    "    # Prefer \"none\" to silence W&B in newer transformers\n",
    "    report_to=\"none\" if \"report_to\" in ta_sig else None,\n",
    "    remove_unused_columns=True if \"remove_unused_columns\" in ta_sig else None,\n",
    "    dataloader_num_workers=2 if \"dataloader_num_workers\" in ta_sig else None,\n",
    "    dataloader_pin_memory=True if \"dataloader_pin_memory\" in ta_sig else None,\n",
    "    eval_accumulation_steps=4 if \"eval_accumulation_steps\" in ta_sig else None,\n",
    ")\n",
    "if eval_key:\n",
    "    training_kwargs[eval_key] = \"epoch\"\n",
    "training_kwargs = {k: v for k, v in training_kwargs.items() if v is not None}\n",
    "args = TrainingArguments(**training_kwargs)\n",
    "\n",
    "def compute_metrics(pred):\n",
    "    import numpy as np\n",
    "    from sklearn.metrics import precision_recall_fscore_support, accuracy_score\n",
    "    y_true = pred.label_ids\n",
    "    y_pred = pred.predictions.argmax(-1)\n",
    "    p, r, f1, _ = precision_recall_fscore_support(y_true, y_pred, average=\"binary\", zero_division=0)\n",
    "    acc = accuracy_score(y_true, y_pred)\n",
    "    return {\"accuracy\": acc, \"f1\": f1, \"precision\": p, \"recall\": r}\n",
    "\n",
    "# processing_class (new) vs tokenizer (old)\n",
    "trainer_kwargs = dict(\n",
    "    model=model,\n",
    "    args=args,\n",
    "    train_dataset=train_dataset_tokenized,\n",
    "    eval_dataset=val_dataset_tokenized,\n",
    "    compute_metrics=compute_metrics,\n",
    "    data_collator=data_collator,\n",
    ")\n",
    "if \"processing_class\" in inspect.signature(Trainer.__init__).parameters:\n",
    "    trainer_kwargs[\"processing_class\"] = tokenizer\n",
    "else:\n",
    "    trainer_kwargs[\"tokenizer\"] = tokenizer\n",
    "\n",
    "trainer = Trainer(**trainer_kwargs)\n",
    "\n",
    "steps_per_epoch = math.ceil(len(train_dataset_tokenized) / args.per_device_train_batch_size)\n",
    "print(f\"Train size: {len(train_dataset_tokenized)} | Val size: {len(val_dataset_tokenized)} | Steps/epoch: ~{steps_per_epoch}\")\n",
    "\n",
    "trainer.train()\n",
    "print(\"Best checkpoint:\", getattr(trainer.state, \"best_model_checkpoint\", None))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 4.2 Save Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save the trained model and tokenizer into a timestamped folder. \n",
    "If a best checkpoint exists, it is copied; otherwise, the current model is saved. \n",
    "The tokenizer is stored alongside to ensure reproducibility during inference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:41:00.106988Z",
     "iopub.status.busy": "2025-09-11T14:41:00.105781Z",
     "iopub.status.idle": "2025-09-11T14:41:00.883981Z",
     "shell.execute_reply": "2025-09-11T14:41:00.883184Z",
     "shell.execute_reply.started": "2025-09-11T14:41:00.106964Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved to: ./mini_detector-20250911-144100\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Charmaine Hooi Wai Yee 2104533\n",
    "# ########################################\n",
    "\n",
    "import time, shutil\n",
    "# ---- Save best/current + tokenizer to timestamped folder ----\n",
    "ts = time.strftime(\"%Y%m%d-%H%M%S\")\n",
    "save_dir = f\"./mini_detector-{ts}\"\n",
    "best_ckpt = getattr(trainer.state, \"best_model_checkpoint\", None)\n",
    "os.makedirs(save_dir, exist_ok=True)\n",
    "if best_ckpt and os.path.isdir(best_ckpt):\n",
    "    shutil.copytree(best_ckpt, save_dir, dirs_exist_ok=True)\n",
    "else:\n",
    "    trainer.save_model(save_dir)\n",
    "tokenizer.save_pretrained(save_dir)\n",
    "print(\"Saved to:\", save_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 4.3 Report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate the trained model on the validation set. \n",
    "It generates predicted probabilities, computes class predictions, \n",
    "and outputs a classification report, confusion matrix, ROC-AUC, \n",
    "and PR-AUC to assess model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:41:00.885027Z",
     "iopub.status.busy": "2025-09-11T14:41:00.884808Z",
     "iopub.status.idle": "2025-09-11T14:42:38.986839Z",
     "shell.execute_reply": "2025-09-11T14:42:38.985961Z",
     "shell.execute_reply.started": "2025-09-11T14:41:00.885010Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/nn/parallel/_functions.py:70: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification report (0=human, 1=ai):\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9986    0.9703    0.9842      6017\n",
      "           1     0.9709    0.9987    0.9846      5973\n",
      "\n",
      "    accuracy                         0.9844     11990\n",
      "   macro avg     0.9847    0.9845    0.9844     11990\n",
      "weighted avg     0.9848    0.9844    0.9844     11990\n",
      "\n",
      "Confusion matrix [[TN,FP],[FN,TP]]:\n",
      " [[5838  179]\n",
      " [   8 5965]]\n",
      "ROC-AUC: 0.9996192772745762\n",
      "PR-AUC : 0.9997123393098253\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Charmaine Hooi Wai Yee 2104533\n",
    "# ########################################\n",
    "\n",
    "# ---- Quick validation report ----\n",
    "import numpy as np\n",
    "pred = trainer.predict(val_dataset_tokenized)\n",
    "probs = torch.softmax(torch.tensor(pred.predictions), dim=-1).numpy()\n",
    "y_true = pred.label_ids\n",
    "y_pred = probs.argmax(1)\n",
    "y_score = probs[:,1]\n",
    "\n",
    "print(\"\\nClassification report (0=human, 1=ai):\\n\",\n",
    "      classification_report(y_true, y_pred, digits=4))\n",
    "print(\"Confusion matrix [[TN,FP],[FN,TP]]:\\n\", confusion_matrix(y_true, y_pred))\n",
    "print(\"ROC-AUC:\", roc_auc_score(y_true, y_score))\n",
    "print(\"PR-AUC :\", average_precision_score(y_true, y_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "## 5.0: Model Testing & Analysis ##"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 5.1: Load and Prepare Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:42:38.988606Z",
     "iopub.status.busy": "2025-09-11T14:42:38.988097Z",
     "iopub.status.idle": "2025-09-11T14:42:40.391997Z",
     "shell.execute_reply": "2025-09-11T14:42:40.391207Z",
     "shell.execute_reply.started": "2025-09-11T14:42:38.988583Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original test dataset shape: (24362, 2)\n",
      "Test set class distribution:\n",
      "generated\n",
      "0    15125\n",
      "1     9237\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Cleaned test dataset shape: (24356, 2)\n",
      "Cleaned test set class distribution:\n",
      "generated\n",
      "0    15125\n",
      "1     9231\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "# Load the original test split from the dataset\n",
    "test_dataset_original = dataset['test']\n",
    "test_df = pd.DataFrame(test_dataset_original)\n",
    "\n",
    "# Apply the same cleaning steps as training data\n",
    "print(\"Original test dataset shape:\", test_df.shape)\n",
    "print(\"Test set class distribution:\")\n",
    "print(test_df['generated'].value_counts())\n",
    "\n",
    "# Clean the test data (same preprocessing as training)\n",
    "test_df = test_df.drop_duplicates(subset='text')\n",
    "test_df = test_df.dropna(subset=['text'])\n",
    "test_df['text'] = test_df['text'].astype(str).str.strip()\n",
    "test_df = test_df[test_df['text'] != \"\"]\n",
    "test_df['text'] = test_df['text'].apply(lambda x: x.encode('utf-8', 'ignore').decode('utf-8'))\n",
    "\n",
    "print(\"\\nCleaned test dataset shape:\", test_df.shape)\n",
    "print(\"Cleaned test set class distribution:\")\n",
    "print(test_df['generated'].value_counts())\n",
    "\n",
    "# Convert to Hugging Face Dataset format\n",
    "test_dataset_hf = Dataset.from_dict({\n",
    "    'text': test_df['text'].tolist(), \n",
    "    'label': test_df['generated'].tolist()\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 5.2: Tokenize Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:43:48.283391Z",
     "iopub.status.busy": "2025-09-11T14:43:48.282880Z",
     "iopub.status.idle": "2025-09-11T14:44:14.588072Z",
     "shell.execute_reply": "2025-09-11T14:44:14.586869Z",
     "shell.execute_reply.started": "2025-09-11T14:43:48.283368Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "006dda0024bf48269eeeb4ca971caa9f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map (num_proc=4):   0%|          | 0/24356 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test dataset tokenized: 24356 samples\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "# Use the same tokenization as training\n",
    "test_dataset_tokenized = test_dataset_hf.map(tokenize_batch, batched=True, num_proc=4)\n",
    "test_dataset_tokenized.set_format(type='torch', columns=['input_ids', 'attention_mask', 'label'])\n",
    "\n",
    "print(f\"Test dataset tokenized: {len(test_dataset_tokenized)} samples\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 5.3: Evaluate Model on Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:44:14.590691Z",
     "iopub.status.busy": "2025-09-11T14:44:14.590220Z",
     "iopub.status.idle": "2025-09-11T14:47:35.728991Z",
     "shell.execute_reply": "2025-09-11T14:47:35.728311Z",
     "shell.execute_reply.started": "2025-09-11T14:44:14.590655Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/nn/parallel/_functions.py:70: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "# Get predictions on test set\n",
    "test_predictions = trainer.predict(test_dataset_tokenized)\n",
    "\n",
    "# Extract probabilities and predictions\n",
    "test_probs = torch.softmax(torch.tensor(test_predictions.predictions), dim=-1).numpy()\n",
    "test_y_true = test_predictions.label_ids\n",
    "test_y_pred = test_probs.argmax(1)\n",
    "test_y_score = test_probs[:, 1]  # Probability of AI class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 5.4: Compute Performance Metrics for Train Set & Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:47:35.730418Z",
     "iopub.status.busy": "2025-09-11T14:47:35.729885Z",
     "iopub.status.idle": "2025-09-11T14:47:35.875076Z",
     "shell.execute_reply": "2025-09-11T14:47:35.874316Z",
     "shell.execute_reply.started": "2025-09-11T14:47:35.730379Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Set Size: 47,878 samples\n",
      "Val Set Size: 11,990 samples\n",
      "Test Set Size: 24,356 samples\n",
      "\n",
      " Train Set RESULTS \n",
      "Accuracy:  0.9844\n",
      "Precision: 0.9709\n",
      "Recall:    0.9987\n",
      "F1-Score:  0.9846\n",
      "ROC-AUC:   0.9996\n",
      "PR-AUC:    0.9997\n",
      "\n",
      "Classification Report (0=Human, 1=AI):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       Human     0.9986    0.9703    0.9842      6017\n",
      "          AI     0.9709    0.9987    0.9846      5973\n",
      "\n",
      "    accuracy                         0.9844     11990\n",
      "   macro avg     0.9847    0.9845    0.9844     11990\n",
      "weighted avg     0.9848    0.9844    0.9844     11990\n",
      "\n",
      "Confusion Matrix [[TN, FP], [FN, TP]]:\n",
      "[[5838  179]\n",
      " [   8 5965]]\n",
      "\n",
      " Test Set RESULTS \n",
      "Accuracy:  0.9828\n",
      "Precision: 0.9583\n",
      "Recall:    0.9982\n",
      "F1-Score:  0.9778\n",
      "ROC-AUC:   0.9996\n",
      "PR-AUC:    0.9995\n",
      "\n",
      "Classification Report (0=Human, 1=AI):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       Human     0.9988    0.9735    0.9860     15125\n",
      "          AI     0.9583    0.9982    0.9778      9231\n",
      "\n",
      "    accuracy                         0.9828     24356\n",
      "   macro avg     0.9786    0.9858    0.9819     24356\n",
      "weighted avg     0.9835    0.9828    0.9829     24356\n",
      "\n",
      "Confusion Matrix [[TN, FP], [FN, TP]]:\n",
      "[[14724   401]\n",
      " [   17  9214]]\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1-Score</th>\n",
       "      <th>ROC-AUC</th>\n",
       "      <th>PR-AUC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Train</th>\n",
       "      <td>0.984404</td>\n",
       "      <td>0.970866</td>\n",
       "      <td>0.998661</td>\n",
       "      <td>0.984567</td>\n",
       "      <td>0.999619</td>\n",
       "      <td>0.999712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.982838</td>\n",
       "      <td>0.958294</td>\n",
       "      <td>0.998158</td>\n",
       "      <td>0.977820</td>\n",
       "      <td>0.999567</td>\n",
       "      <td>0.999534</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Accuracy  Precision    Recall  F1-Score   ROC-AUC    PR-AUC\n",
       "Train  0.984404   0.970866  0.998661  0.984567  0.999619  0.999712\n",
       "Test   0.982838   0.958294  0.998158  0.977820  0.999567  0.999534"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "from sklearn.metrics import (\n",
    "    classification_report, confusion_matrix, accuracy_score,\n",
    "    precision_score, recall_score, f1_score, roc_auc_score, \n",
    "    average_precision_score\n",
    ")\n",
    "\n",
    "def evaluate_predictions(y_true, y_pred, y_score, split_name=\"Dataset\"):\n",
    "    metrics = {}\n",
    "    metrics['Accuracy']   = accuracy_score(y_true, y_pred)\n",
    "    metrics['Precision']  = precision_score(y_true, y_pred, average='binary')\n",
    "    metrics['Recall']     = recall_score(y_true, y_pred, average='binary')\n",
    "    metrics['F1-Score']   = f1_score(y_true, y_pred, average='binary')\n",
    "    metrics['ROC-AUC']    = roc_auc_score(y_true, y_score)\n",
    "    metrics['PR-AUC']     = average_precision_score(y_true, y_score)\n",
    "    \n",
    "    print(f\"\\n {split_name} RESULTS \")\n",
    "    print(f\"Accuracy:  {metrics['Accuracy']:.4f}\")\n",
    "    print(f\"Precision: {metrics['Precision']:.4f}\")\n",
    "    print(f\"Recall:    {metrics['Recall']:.4f}\")\n",
    "    print(f\"F1-Score:  {metrics['F1-Score']:.4f}\")\n",
    "    print(f\"ROC-AUC:   {metrics['ROC-AUC']:.4f}\")\n",
    "    print(f\"PR-AUC:    {metrics['PR-AUC']:.4f}\")\n",
    "    \n",
    "    print(\"\\nClassification Report (0=Human, 1=AI):\")\n",
    "    print(classification_report(y_true, y_pred, target_names=['Human','AI'], digits=4))\n",
    "    \n",
    "    print(\"Confusion Matrix [[TN, FP], [FN, TP]]:\")\n",
    "    print(confusion_matrix(y_true, y_pred))\n",
    "    \n",
    "    return metrics\n",
    "    \n",
    "print(f\"Train Set Size: {len(train_dataset_tokenized):,} samples\")\n",
    "print(f\"Val Set Size: {len(val_dataset_tokenized):,} samples\") \n",
    "print(f\"Test Set Size: {len(test_dataset_tokenized):,} samples\")\n",
    "\n",
    "train_metrics = evaluate_predictions(y_true, y_pred, y_score, \"Train Set\")\n",
    "test_metrics  = evaluate_predictions(test_y_true, test_y_pred, test_y_score, \"Test Set\")\n",
    "\n",
    "\n",
    "# Combine into a DataFrame for side-by-side comparison\n",
    "comparison_df = pd.DataFrame([train_metrics, test_metrics], index=[\"Train\", \"Test\"])\n",
    "print(\"\\n\")\n",
    "display(comparison_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 5.5: Performance Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "Plot ROC and PR curves for both train & test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T14:47:35.876716Z",
     "iopub.status.busy": "2025-09-11T14:47:35.876495Z",
     "iopub.status.idle": "2025-09-11T14:47:36.785073Z",
     "shell.execute_reply": "2025-09-11T14:47:36.784375Z",
     "shell.execute_reply.started": "2025-09-11T14:47:35.876700Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import roc_curve, precision_recall_curve\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# --- ROC Curve\n",
    "plt.subplot(1, 2, 1)\n",
    "fpr_train, tpr_train, _ = roc_curve(y_true, y_score)\n",
    "fpr_test,  tpr_test,  _ = roc_curve(test_y_true,  test_y_score)\n",
    "\n",
    "plt.plot(fpr_train, tpr_train, color='blue',  lw=2,\n",
    "         label=f'Train ROC (AUC = {train_metrics[\"ROC-AUC\"]:.3f})')\n",
    "plt.plot(fpr_test,  tpr_test,  color='red',   lw=2,\n",
    "         label=f'Test ROC (AUC = {test_metrics[\"ROC-AUC\"]:.3f})')\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=1, linestyle='--')\n",
    "\n",
    "plt.xlim([0.0, 1.0]); plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate'); plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "\n",
    "# --- Precision-Recall Curve\n",
    "plt.subplot(1, 2, 2)\n",
    "prec_train, rec_train, _ = precision_recall_curve(y_true, y_score)\n",
    "prec_test,  rec_test,  _ = precision_recall_curve(test_y_true,  test_y_score)\n",
    "\n",
    "plt.plot(rec_train, prec_train, color='blue', lw=2,\n",
    "         label=f'Train PR (AUC = {train_metrics[\"PR-AUC\"]:.3f})')\n",
    "plt.plot(rec_test,  prec_test,  color='red',  lw=2,\n",
    "         label=f'Test PR (AUC = {test_metrics[\"PR-AUC\"]:.3f})')\n",
    "\n",
    "plt.xlim([0.0, 1.0]); plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('Recall'); plt.ylabel('Precision')\n",
    "plt.title('Precision-Recall Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": false
   },
   "source": [
    "#### 5.6: Cross Domain Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For Cross-Domain Testing, we loaded the Kaggle dataset AH&AITD dataset, which is larger, more diverse, and includes formal texts from older sources than the original dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T15:11:16.601649Z",
     "iopub.status.busy": "2025-09-11T15:11:16.601148Z",
     "iopub.status.idle": "2025-09-11T15:11:18.436008Z",
     "shell.execute_reply": "2025-09-11T15:11:18.435377Z",
     "shell.execute_reply.started": "2025-09-11T15:11:16.601622Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   sr.no                                               text       source  \\\n",
      "0      0  Produced by Chris Young Ritzen, Tamara Weitzma...  openwebtext   \n",
      "1      1  Lawrence Eugene Doby (December 13, 1923 – June...  openwebtext   \n",
      "2      2  Shock and Awe\\n\\nGabe Newell is about to make ...  openwebtext   \n",
      "3      3  The Best Answers to Tough Interview Questions\\...  openwebtext   \n",
      "4      4  Contents:\\n\\n1.) Preamble\\n\\n2.) Understand Yo...  openwebtext   \n",
      "\n",
      "      label_name  label_id  \n",
      "0  human-written         1  \n",
      "1  human-written         1  \n",
      "2  human-written         1  \n",
      "3  human-written         1  \n",
      "4  human-written         1  \n",
      "Index(['sr.no', 'text', 'source', 'label_name', 'label_id'], dtype='object')\n",
      "label_name\n",
      "human-written    5790\n",
      "ai-generated     5790\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Load the Excel file\n",
    "cross_domain_df = pd.read_excel(\n",
    "    \"/kaggle/input/ah-and-aitd-arslans-human-and-ai-text-database/Dataset.xlsx\"\n",
    ")\n",
    "\n",
    "print(test_df.head())\n",
    "print(test_df.columns)\n",
    "print(test_df['label_name'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T15:11:20.605051Z",
     "iopub.status.busy": "2025-09-11T15:11:20.604487Z",
     "iopub.status.idle": "2025-09-11T15:11:57.124912Z",
     "shell.execute_reply": "2025-09-11T15:11:57.124273Z",
     "shell.execute_reply.started": "2025-09-11T15:11:20.605027Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d4976fddca7041dda8ccb1a9026889fb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/11580 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "# Convert to Hugging Face Dataset format\n",
    "cross_domain_dataset = Dataset.from_dict({\n",
    "    'text': cross_domain_df['text'].tolist(),\n",
    "    'label': cross_domain_df['label_id'].tolist()   # use label_id instead of label\n",
    "})\n",
    "\n",
    "# Tokenize with the same tokenizer used in training\n",
    "cross_domain_tokenized = cross_domain_dataset.map(\n",
    "    lambda x: tokenizer(x['text'], padding=\"max_length\", truncation=True),\n",
    "    batched=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T15:14:09.424054Z",
     "iopub.status.busy": "2025-09-11T15:14:09.423275Z",
     "iopub.status.idle": "2025-09-11T15:15:36.866737Z",
     "shell.execute_reply": "2025-09-11T15:15:36.865877Z",
     "shell.execute_reply.started": "2025-09-11T15:14:09.424027Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/nn/parallel/_functions.py:70: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "cross_pred = trainer.predict(cross_domain_tokenized)\n",
    "\n",
    "# Convert logits to probabilities\n",
    "cross_probs = torch.softmax(torch.tensor(cross_pred.predictions), dim=-1).numpy()\n",
    "cross_y_true = cross_pred.label_ids\n",
    "cross_y_pred = cross_probs.argmax(1)\n",
    "cross_y_score = cross_probs[:, 1]  # probability of class \"AI\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T15:15:44.302657Z",
     "iopub.status.busy": "2025-09-11T15:15:44.302352Z",
     "iopub.status.idle": "2025-09-11T15:15:44.335352Z",
     "shell.execute_reply": "2025-09-11T15:15:44.334562Z",
     "shell.execute_reply.started": "2025-09-11T15:15:44.302631Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Cross-Domain Test RESULTS \n",
      "Accuracy:  0.4927\n",
      "Precision: 0.4963\n",
      "Recall:    0.9829\n",
      "F1-Score:  0.6596\n",
      "ROC-AUC:   0.2426\n",
      "PR-AUC:    0.3557\n",
      "\n",
      "Classification Report (0=Human, 1=AI):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       Human     0.1316    0.0026    0.0051      5790\n",
      "          AI     0.4963    0.9829    0.6596      5790\n",
      "\n",
      "    accuracy                         0.4927     11580\n",
      "   macro avg     0.3140    0.4927    0.3323     11580\n",
      "weighted avg     0.3140    0.4927    0.3323     11580\n",
      "\n",
      "Confusion Matrix [[TN, FP], [FN, TP]]:\n",
      "[[  15 5775]\n",
      " [  99 5691]]\n"
     ]
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "cross_metrics = evaluate_predictions(cross_y_true, cross_y_pred, cross_y_score, split_name=\"Cross-Domain Test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "editable": false,
    "execution": {
     "iopub.execute_input": "2025-09-11T15:16:42.527217Z",
     "iopub.status.busy": "2025-09-11T15:16:42.526348Z",
     "iopub.status.idle": "2025-09-11T15:16:42.950989Z",
     "shell.execute_reply": "2025-09-11T15:16:42.950187Z",
     "shell.execute_reply.started": "2025-09-11T15:16:42.527189Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ########################################\n",
    "# Coded By: Seow Yi Xuan 2105524\n",
    "# ########################################\n",
    "\n",
    "from sklearn.metrics import roc_curve, precision_recall_curve\n",
    "\n",
    "# ROC curve\n",
    "fpr_cross, tpr_cross, _ = roc_curve(cross_y_true, cross_y_score)\n",
    "fpr_in, tpr_in, _ = roc_curve(test_y_true, test_y_score)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(fpr_in, tpr_in, label=f\"In-domain ROC (AUC={test_metrics['ROC-AUC']:.3f})\", color=\"blue\")\n",
    "plt.plot(fpr_cross, tpr_cross, label=f\"Cross-domain ROC (AUC={cross_metrics['ROC-AUC']:.3f})\", color=\"red\")\n",
    "plt.plot([0, 1], [0, 1], linestyle=\"--\", color=\"gray\")\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC Curve\")\n",
    "plt.legend()\n",
    "\n",
    "# PR curve\n",
    "prec_cross, rec_cross, _ = precision_recall_curve(cross_y_true, cross_y_score)\n",
    "prec_in, rec_in, _ = precision_recall_curve(test_y_true, test_y_score)\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(rec_in, prec_in, label=f\"In-domain PR (AUC={test_metrics['PR-AUC']:.3f})\", color=\"blue\")\n",
    "plt.plot(rec_cross, prec_cross, label=f\"Cross-domain PR (AUC={cross_metrics['PR-AUC']:.3f})\", color=\"red\")\n",
    "plt.xlabel(\"Recall\")\n",
    "plt.ylabel(\"Precision\")\n",
    "plt.title(\"Precision-Recall Curve\")\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "01a1fb5f969f467c8ae5902aa8e11444": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "24fc85afed3f4193b3c1b6da8eeb7736": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ButtonStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ButtonStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "button_color": null,
      "font_weight": ""
     }
    },
    "24fe006192ba47beb1dbaf67461088c6": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "LabelModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "LabelModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "LabelView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_89d2ee9ec5504f268e52c1397c73c297",
      "placeholder": "​",
      "style": "IPY_MODEL_8826a2d8efe9492ab14e638cbf2bd166",
      "value": "Connecting..."
     }
    },
    "3a7ffdf2ae0e4e67b0507a01b2953358": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "3c041926646343828078f168e296591d": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "4343dab244f640cea51a50cd4aeb2514": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "CheckboxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "CheckboxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "CheckboxView",
      "description": "Add token as git credential?",
      "description_tooltip": null,
      "disabled": false,
      "indent": true,
      "layout": "IPY_MODEL_6fb30196b17e4709b0703a3c3a0eb4f7",
      "style": "IPY_MODEL_7a819236a7724432b2004c25ef0a2507",
      "value": true
     }
    },
    "6fb30196b17e4709b0703a3c3a0eb4f7": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "7a819236a7724432b2004c25ef0a2507": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "8826a2d8efe9492ab14e638cbf2bd166": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "8841c3d00f2046b18c68da674c74378d": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "89d2ee9ec5504f268e52c1397c73c297": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "8a0868a65a8c4b789471c9c9bd806c3d": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "VBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "VBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "VBoxView",
      "box_style": "",
      "children": [],
      "layout": "IPY_MODEL_f755c96ca1a44ce58190a40f03905651"
     }
    },
    "8c86b5a112984b4f8e985cd1dc9a75fd": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ButtonModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ButtonModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ButtonView",
      "button_style": "",
      "description": "Login",
      "disabled": false,
      "icon": "",
      "layout": "IPY_MODEL_3a7ffdf2ae0e4e67b0507a01b2953358",
      "style": "IPY_MODEL_24fc85afed3f4193b3c1b6da8eeb7736",
      "tooltip": ""
     }
    },
    "a0a59bda3e3e41849550823d4c5910fb": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_3c041926646343828078f168e296591d",
      "placeholder": "​",
      "style": "IPY_MODEL_8841c3d00f2046b18c68da674c74378d",
      "value": "<center> <img\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.svg\nalt='Hugging Face'> <br> Copy a token from <a\nhref=\"https://huggingface.co/settings/tokens\" target=\"_blank\">your Hugging Face\ntokens page</a> and paste it below. <br> Immediately click login after copying\nyour token or it might be stored in plain text in this notebook file. </center>"
     }
    },
    "a45b67bba38d45ba953a68b19eb65929": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "b4d4492a72344b7988bcf4c1675d4ea9": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "e79c19404921474b8604edfa1a959029": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_eee18a20463341abbf5eee7b2177367c",
      "placeholder": "​",
      "style": "IPY_MODEL_a45b67bba38d45ba953a68b19eb65929",
      "value": "\n<b>Pro Tip:</b> If you don't already have one, you can create a dedicated\n'notebooks' token with 'write' access, that you can then easily reuse for all\nnotebooks. </center>"
     }
    },
    "eee18a20463341abbf5eee7b2177367c": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "f755c96ca1a44ce58190a40f03905651": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": "center",
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": "flex",
      "flex": null,
      "flex_flow": "column",
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": "50%"
     }
    },
    "fd0915605e5f4c5380e302afa5a87d88": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "PasswordModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "PasswordModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "PasswordView",
      "continuous_update": true,
      "description": "Token:",
      "description_tooltip": null,
      "disabled": false,
      "layout": "IPY_MODEL_01a1fb5f969f467c8ae5902aa8e11444",
      "placeholder": "​",
      "style": "IPY_MODEL_b4d4492a72344b7988bcf4c1675d4ea9",
      "value": ""
     }
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
